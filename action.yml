name: 'AWS Remote Docker Action'
description: 'Creates arm64 and amd64 EC2 instances running docker for use with docker/buildx for native multi-architecture builds'
author: 'TrueMark'
branding:
  icon: 'check-circle'
  color: 'red'
inputs:
  subnet-id:
    required: true
    description: 'Subnet ID to launch the instances in'
  security-group-id:
    required: true
    description: 'Security group to apply to the EC2 instances'
  arm64-instance-type:
    required: false
    description: 'Instance type to use for the arm64 EC2 instance'
    default: 'c7g.large'
  amd64-instance-type:
    required: false
    description: 'Instance type to use for the amd64 EC2 instance'
    default: 'c6i.large'
  instance-profile:
    required: false
    description: 'Instance profile to use for the EC2 instances'
  volume-size:
    required: false
    description: 'Volume size in GB to use for the EC2 instances'
    default: '8'
  associate-public-ip-address:
    required: false
    description: 'Associate a public IP address to the EC2 instances'
    default: 'true'
  tags:
    required: false
    description: 'Tags to apply to the EC2 instances'
  region:
    required: true
    description: 'AWS region to use for the EC2 instances'
  key-name:
    required: false
    description: 'SSH key name to use for the EC2 instances'
runs:
  using: 'composite'
  steps:
    - name: Generate SSH Key
      id: ssh-key
      uses: truemark/generate-ssh-key-action@v2
    - name: Setup arm64 instance
      id: arm64-instance
      uses: truemark/aws-ec2-run-instance-action@v4
      with:
        security-group-id: "${{ inputs.security-group-id }}"
        subnet-id: "${{ inputs.subnet-id }}"
        image-id: "default-arm64"
        instance-type: "${{ inputs.arm64-instance-type }}"
        instance-profile: "${{ inputs.instance-profile }}"
        region: "${{ inputs.region }}"
        user-data: |
          #!/usr/bin/env bash
          yum install docker -y
          usermod -a -G docker ec2-user
          systemctl enable docker.service
          systemctl start docker.service
          mkdir -p /home/ec2-user/.ssh
          touch /home/ec2-user/.ssh/authorized_keys
          chmod 700 /home/ec2-user/.ssh
          chmod 600 /home/ec2-user/.ssh/authorized_keys
          echo "${{ steps.ssh-key.outputs.public-key }}" >> /home/ec2-user/.ssh/authorized_keys
    - name: Setup amd64 instance
      id: amd64-instance
      uses: truemark/aws-ec2-run-instance-action@v4
      with:
        security-group-id: "${{ inputs.security-group-id }}"
        subnet-id: "${{ inputs.subnet-id }}"
        image-id: "default-amd64"
        instance-type: "${{ inputs.amd64-instance-type }}"
        instance-profile: "${{ inputs.instance-profile }}"
        region: "${{ inputs.region }}"
        user-data: |
          #!/usr/bin/env bash
          yum install docker -y
          usermod -a -G docker ec2-user
          systemctl enable docker.service
          systemctl start docker.service
          mkdir -p /home/ec2-user/.ssh
          touch /home/ec2-user/.ssh/authorized_keys
          chmod 700 /home/ec2-user/.ssh
          chmod 600 /home/ec2-user/.ssh/authorized_keys
          echo "${{ steps.ssh-key.outputs.public-key }}" >> /home/ec2-user/.ssh/authorized_keys
    - name: Wait for instances
      id: ec2-wait
      uses: truemark/aws-ec2-instance-wait-action@v3
      with:
        instance-ids: ${{ steps.arm64-instance.outputs.instance-id }},${{ steps.amd64-instance.outputs.instance-id }}
        region: "${{ inputs.region }}"
        timeout-ms: "600000"
    - name: Describe arm64 Instance
      id: describe-arm64
      uses: truemark/aws-ec2-describe-instance-action@v2
      with:
        instance-id: ${{ steps.arm64-instance.outputs.instance-id }}
        region: "${{ inputs.region }}"
    - name: Describe amd64 Instance
      id: describe-amd64
      uses: truemark/aws-ec2-describe-instance-action@v2
      with:
        instance-id: ${{ steps.amd64-instance.outputs.instance-id }}
        region: "${{ inputs.region }}"
    - name: SSH Known Hosts
      id: ssh-known-hosts
      uses: truemark/ssh-known-hosts-action@v1
      with:
        scan-hosts: ${{ steps.describe-arm64.outputs.public-dns-name }},${{ steps.describe-amd64.outputs.public-dns-name }}
    - name: Setup Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      with:
        endpoint: ssh://ec2-user@${{ steps.describe-amd64.outputs.public-dns-name }}
        platforms: linux/amd64
        append: |
          - endpoint: ssh://ec2-user@${{ steps.describe-arm64.outputs.public-dns-name }}
            platform: linux/arm64
outputs:
  arm64-instance-id:
    description: 'The instance ID of the arm64 EC2 instance'
    value: "${{ steps.arm64-instance.outputs.instance-id }}"
  amd64-instance-id:
    description: 'The instance ID of the amd64 EC2 instance'
    value: "${{ steps.amd64-instance.outputs.instance-id }}"
